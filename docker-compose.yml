version: '3'

services: 
  elasticsearch:
    container_name: elasticsearch
    build:
      context: elasticsearch/
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - elasticsearch:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx512m -Xms512m" # 자바 메모리
      ELASTIC_PASSWORD: chamomile123
      discovery.type: single-node
    healthcheck:
      test: curl --silent http://elasticsearch:9200 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5
        

  kibana:
    container_name: kibana
    build:
      context: kibana/
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,z
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy

  mongodb: 
    image: mongo
    container_name: mongodb
    restart: always
    env_file:
      - ./settings/prod/.env.db
    volumes:
      - mongodb:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro 
    ports: 
      - 27000:27017
    healthcheck:
      test: echo 'db.stats().ok' | mongo mongodb:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  api:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    command: gunicorn --bind 0.0.0.0:5001 app:app 
    ports: 
      - 5001:5001
    volumes:
      - ./backend/:/app
    depends_on:
      elasticsearch:
        condition: service_healthy
      mongodb:
        condition: service_healthy

    

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile 
    ports: 
      - 3000:3000
    volumes:
      - ./frontend/:/app
      - ./frontend/node_modules/:/app/node_modules
      - build_file:/app/build # build폴더 생성
    tty: true 


  nginx:
    # image: nginx:latest
    build:
      context: ./nginx
    container_name: nginx_service

    ports:
     - "80:8080"
     
    volumes: #front부분 build 부분 맵핑을 시켜줘야함 
     - build_file:/app/build

    depends_on:
     - api
     - frontend


volumes:
  mongodb:
  build_file:
  elasticsearch:


 

  # mongodb 접속에 대해서 물어보기


  # docker-compose exec mongodb bash 
 # mongo -u root -p chamomile123 

  # front 주소값 제대로 다시 주기 


  # nginx volumes 부분에 front container 주소 맵핑을 시켜줘야함 

  # docker volume inspect <volume-name> : 특정 volume 상세조회 

  # docker system prune

  # local에 있는 DB가 아닌 현재 지금 container에 새로 올라가있는데 이부분 질문

  # 포트번호 :을 기준으로 왼쪽이 오른쪽으로 변경되는 구조 

  # docker system prune

  # docker inspect <컨테이너 ID> : ip check